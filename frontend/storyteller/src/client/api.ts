// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "api.proto" (package "api", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message api.Topics
 */
export interface Topics {
    /**
     * @generated from protobuf field: repeated string topics = 1;
     */
    topics: string[];
    /**
     * @generated from protobuf field: optional int32 length = 2;
     */
    length?: number;
}
/**
 * @generated from protobuf message api.Story
 */
export interface Story {
    /**
     * @generated from protobuf field: string story = 1;
     */
    story: string;
    /**
     * @generated from protobuf field: int32 pages = 2;
     */
    pages: number;
    /**
     * @generated from protobuf field: string delimiter = 3;
     */
    delimiter: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Topics$Type extends MessageType<Topics> {
    constructor() {
        super("api.Topics", [
            { no: 1, name: "topics", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Topics>): Topics {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.topics = [];
        if (value !== undefined)
            reflectionMergePartial<Topics>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Topics): Topics {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string topics */ 1:
                    message.topics.push(reader.string());
                    break;
                case /* optional int32 length */ 2:
                    message.length = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Topics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string topics = 1; */
        for (let i = 0; i < message.topics.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.topics[i]);
        /* optional int32 length = 2; */
        if (message.length !== undefined)
            writer.tag(2, WireType.Varint).int32(message.length);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Topics
 */
export const Topics = new Topics$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Story$Type extends MessageType<Story> {
    constructor() {
        super("api.Story", [
            { no: 1, name: "story", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pages", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "delimiter", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Story>): Story {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.story = "";
        message.pages = 0;
        message.delimiter = "";
        if (value !== undefined)
            reflectionMergePartial<Story>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Story): Story {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string story */ 1:
                    message.story = reader.string();
                    break;
                case /* int32 pages */ 2:
                    message.pages = reader.int32();
                    break;
                case /* string delimiter */ 3:
                    message.delimiter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Story, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string story = 1; */
        if (message.story !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.story);
        /* int32 pages = 2; */
        if (message.pages !== 0)
            writer.tag(2, WireType.Varint).int32(message.pages);
        /* string delimiter = 3; */
        if (message.delimiter !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.delimiter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message api.Story
 */
export const Story = new Story$Type();
/**
 * @generated ServiceType for protobuf service api.StoryGenerator
 */
export const StoryGenerator = new ServiceType("api.StoryGenerator", [
    { name: "GenerateStory", options: {}, I: Topics, O: Story }
]);
