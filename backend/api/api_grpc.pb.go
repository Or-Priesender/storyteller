// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoryGeneratorClient is the client API for StoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoryGeneratorClient interface {
	GenerateStory(ctx context.Context, in *Topics, opts ...grpc.CallOption) (*Story, error)
}

type storyGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewStoryGeneratorClient(cc grpc.ClientConnInterface) StoryGeneratorClient {
	return &storyGeneratorClient{cc}
}

func (c *storyGeneratorClient) GenerateStory(ctx context.Context, in *Topics, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := c.cc.Invoke(ctx, "/api.StoryGenerator/GenerateStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoryGeneratorServer is the server API for StoryGenerator service.
// All implementations must embed UnimplementedStoryGeneratorServer
// for forward compatibility
type StoryGeneratorServer interface {
	GenerateStory(context.Context, *Topics) (*Story, error)
	mustEmbedUnimplementedStoryGeneratorServer()
}

// UnimplementedStoryGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedStoryGeneratorServer struct {
}

func (UnimplementedStoryGeneratorServer) GenerateStory(context.Context, *Topics) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStory not implemented")
}
func (UnimplementedStoryGeneratorServer) mustEmbedUnimplementedStoryGeneratorServer() {}

// UnsafeStoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoryGeneratorServer will
// result in compilation errors.
type UnsafeStoryGeneratorServer interface {
	mustEmbedUnimplementedStoryGeneratorServer()
}

func RegisterStoryGeneratorServer(s grpc.ServiceRegistrar, srv StoryGeneratorServer) {
	s.RegisterService(&StoryGenerator_ServiceDesc, srv)
}

func _StoryGenerator_GenerateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Topics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoryGeneratorServer).GenerateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.StoryGenerator/GenerateStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoryGeneratorServer).GenerateStory(ctx, req.(*Topics))
	}
	return interceptor(ctx, in, info, handler)
}

// StoryGenerator_ServiceDesc is the grpc.ServiceDesc for StoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.StoryGenerator",
	HandlerType: (*StoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateStory",
			Handler:    _StoryGenerator_GenerateStory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
